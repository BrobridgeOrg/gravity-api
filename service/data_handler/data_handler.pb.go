// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data_handler.proto

package gravity_api_data_handler

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PushRequest struct {
	EventName            string   `protobuf:"bytes,1,opt,name=eventName,proto3" json:"eventName,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ab6a9d7d4590030, []int{0}
}

func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRequest.Unmarshal(m, b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return xxx_messageInfo_PushRequest.Size(m)
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *PushRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PushReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushReply) Reset()         { *m = PushReply{} }
func (m *PushReply) String() string { return proto.CompactTextString(m) }
func (*PushReply) ProtoMessage()    {}
func (*PushReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ab6a9d7d4590030, []int{1}
}

func (m *PushReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushReply.Unmarshal(m, b)
}
func (m *PushReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushReply.Marshal(b, m, deterministic)
}
func (m *PushReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushReply.Merge(m, src)
}
func (m *PushReply) XXX_Size() int {
	return xxx_messageInfo_PushReply.Size(m)
}
func (m *PushReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PushReply.DiscardUnknown(m)
}

var xxx_messageInfo_PushReply proto.InternalMessageInfo

func (m *PushReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PushReply) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "gravity.api.data_handler.PushRequest")
	proto.RegisterType((*PushReply)(nil), "gravity.api.data_handler.PushReply")
}

func init() { proto.RegisterFile("data_handler.proto", fileDescriptor_0ab6a9d7d4590030) }

var fileDescriptor_0ab6a9d7d4590030 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0x49, 0x2c, 0x49,
	0x8c, 0xcf, 0x48, 0xcc, 0x4b, 0xc9, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92,
	0x48, 0x2f, 0x4a, 0x2c, 0xcb, 0x2c, 0xa9, 0xd4, 0x4b, 0x2c, 0xc8, 0xd4, 0x43, 0x96, 0x57, 0x72,
	0xe5, 0xe2, 0x0e, 0x28, 0x2d, 0xce, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe1,
	0xe2, 0x4c, 0x2d, 0x4b, 0xcd, 0x2b, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x42, 0x08, 0x08, 0x49, 0x70, 0xb1, 0x17, 0x24, 0x56, 0xe6, 0xe4, 0x27, 0xa6, 0x48, 0x30,
	0x29, 0x30, 0x6a, 0xf0, 0x04, 0xc1, 0xb8, 0x4a, 0xb6, 0x5c, 0x9c, 0x10, 0x63, 0x0a, 0x72, 0x2a,
	0x41, 0xca, 0x8a, 0x4b, 0x93, 0x93, 0x53, 0x8b, 0x8b, 0xc1, 0x46, 0x70, 0x04, 0xc1, 0xb8, 0x42,
	0x62, 0x5c, 0x6c, 0x45, 0xa9, 0x89, 0xc5, 0xf9, 0x79, 0x60, 0xfd, 0x9c, 0x41, 0x50, 0x9e, 0xd1,
	0x41, 0x46, 0x2e, 0x6e, 0x97, 0xc4, 0x92, 0x44, 0x0f, 0x88, 0xab, 0x84, 0x42, 0xb8, 0x58, 0x40,
	0xc6, 0x09, 0xa9, 0xea, 0xe1, 0x72, 0xb8, 0x1e, 0x92, 0xab, 0xa5, 0x94, 0x09, 0x29, 0x2b, 0xc8,
	0xa9, 0x54, 0x62, 0x10, 0x8a, 0xe1, 0xe2, 0x02, 0x71, 0x83, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0xa9,
	0x6b, 0xb6, 0x06, 0x63, 0x12, 0x1b, 0x38, 0xa8, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x72,
	0xe2, 0xd4, 0x05, 0x80, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataHandlerClient is the client API for DataHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataHandlerClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	PushStream(ctx context.Context, opts ...grpc.CallOption) (DataHandler_PushStreamClient, error)
}

type dataHandlerClient struct {
	cc *grpc.ClientConn
}

func NewDataHandlerClient(cc *grpc.ClientConn) DataHandlerClient {
	return &dataHandlerClient{cc}
}

func (c *dataHandlerClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, "/gravity.api.data_handler.DataHandler/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataHandlerClient) PushStream(ctx context.Context, opts ...grpc.CallOption) (DataHandler_PushStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DataHandler_serviceDesc.Streams[0], "/gravity.api.data_handler.DataHandler/PushStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataHandlerPushStreamClient{stream}
	return x, nil
}

type DataHandler_PushStreamClient interface {
	Send(*PushRequest) error
	CloseAndRecv() (*PushReply, error)
	grpc.ClientStream
}

type dataHandlerPushStreamClient struct {
	grpc.ClientStream
}

func (x *dataHandlerPushStreamClient) Send(m *PushRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataHandlerPushStreamClient) CloseAndRecv() (*PushReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataHandlerServer is the server API for DataHandler service.
type DataHandlerServer interface {
	Push(context.Context, *PushRequest) (*PushReply, error)
	PushStream(DataHandler_PushStreamServer) error
}

// UnimplementedDataHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedDataHandlerServer struct {
}

func (*UnimplementedDataHandlerServer) Push(ctx context.Context, req *PushRequest) (*PushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedDataHandlerServer) PushStream(srv DataHandler_PushStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushStream not implemented")
}

func RegisterDataHandlerServer(s *grpc.Server, srv DataHandlerServer) {
	s.RegisterService(&_DataHandler_serviceDesc, srv)
}

func _DataHandler_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataHandlerServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.api.data_handler.DataHandler/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataHandlerServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataHandler_PushStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataHandlerServer).PushStream(&dataHandlerPushStreamServer{stream})
}

type DataHandler_PushStreamServer interface {
	SendAndClose(*PushReply) error
	Recv() (*PushRequest, error)
	grpc.ServerStream
}

type dataHandlerPushStreamServer struct {
	grpc.ServerStream
}

func (x *dataHandlerPushStreamServer) SendAndClose(m *PushReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataHandlerPushStreamServer) Recv() (*PushRequest, error) {
	m := new(PushRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DataHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.api.data_handler.DataHandler",
	HandlerType: (*DataHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _DataHandler_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushStream",
			Handler:       _DataHandler_PushStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "data_handler.proto",
}
