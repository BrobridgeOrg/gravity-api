// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

package gravity_api_controller

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetClientCountRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClientCountRequest) Reset()         { *m = GetClientCountRequest{} }
func (m *GetClientCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetClientCountRequest) ProtoMessage()    {}
func (*GetClientCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{0}
}

func (m *GetClientCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClientCountRequest.Unmarshal(m, b)
}
func (m *GetClientCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClientCountRequest.Marshal(b, m, deterministic)
}
func (m *GetClientCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClientCountRequest.Merge(m, src)
}
func (m *GetClientCountRequest) XXX_Size() int {
	return xxx_messageInfo_GetClientCountRequest.Size(m)
}
func (m *GetClientCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClientCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClientCountRequest proto.InternalMessageInfo

type GetClientCountReply struct {
	Count                uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClientCountReply) Reset()         { *m = GetClientCountReply{} }
func (m *GetClientCountReply) String() string { return proto.CompactTextString(m) }
func (*GetClientCountReply) ProtoMessage()    {}
func (*GetClientCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{1}
}

func (m *GetClientCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClientCountReply.Unmarshal(m, b)
}
func (m *GetClientCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClientCountReply.Marshal(b, m, deterministic)
}
func (m *GetClientCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClientCountReply.Merge(m, src)
}
func (m *GetClientCountReply) XXX_Size() int {
	return xxx_messageInfo_GetClientCountReply.Size(m)
}
func (m *GetClientCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClientCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetClientCountReply proto.InternalMessageInfo

func (m *GetClientCountReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetPipelineCountRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPipelineCountRequest) Reset()         { *m = GetPipelineCountRequest{} }
func (m *GetPipelineCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetPipelineCountRequest) ProtoMessage()    {}
func (*GetPipelineCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{2}
}

func (m *GetPipelineCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPipelineCountRequest.Unmarshal(m, b)
}
func (m *GetPipelineCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPipelineCountRequest.Marshal(b, m, deterministic)
}
func (m *GetPipelineCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPipelineCountRequest.Merge(m, src)
}
func (m *GetPipelineCountRequest) XXX_Size() int {
	return xxx_messageInfo_GetPipelineCountRequest.Size(m)
}
func (m *GetPipelineCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPipelineCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPipelineCountRequest proto.InternalMessageInfo

type GetPipelineCountReply struct {
	Count                uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPipelineCountReply) Reset()         { *m = GetPipelineCountReply{} }
func (m *GetPipelineCountReply) String() string { return proto.CompactTextString(m) }
func (*GetPipelineCountReply) ProtoMessage()    {}
func (*GetPipelineCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{3}
}

func (m *GetPipelineCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPipelineCountReply.Unmarshal(m, b)
}
func (m *GetPipelineCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPipelineCountReply.Marshal(b, m, deterministic)
}
func (m *GetPipelineCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPipelineCountReply.Merge(m, src)
}
func (m *GetPipelineCountReply) XXX_Size() int {
	return xxx_messageInfo_GetPipelineCountReply.Size(m)
}
func (m *GetPipelineCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPipelineCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPipelineCountReply proto.InternalMessageInfo

func (m *GetPipelineCountReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RegisterRequest struct {
	ClientID             string   `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{4}
}

func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterRequest.Unmarshal(m, b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterRequest.Size(m)
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type RegisterReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterReply) Reset()         { *m = RegisterReply{} }
func (m *RegisterReply) String() string { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()    {}
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{5}
}

func (m *RegisterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterReply.Unmarshal(m, b)
}
func (m *RegisterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterReply.Marshal(b, m, deterministic)
}
func (m *RegisterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterReply.Merge(m, src)
}
func (m *RegisterReply) XXX_Size() int {
	return xxx_messageInfo_RegisterReply.Size(m)
}
func (m *RegisterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterReply.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterReply proto.InternalMessageInfo

func (m *RegisterReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RegisterReply) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UnregisterRequest struct {
	ClientID             string   `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnregisterRequest) Reset()         { *m = UnregisterRequest{} }
func (m *UnregisterRequest) String() string { return proto.CompactTextString(m) }
func (*UnregisterRequest) ProtoMessage()    {}
func (*UnregisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{6}
}

func (m *UnregisterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterRequest.Unmarshal(m, b)
}
func (m *UnregisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterRequest.Marshal(b, m, deterministic)
}
func (m *UnregisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterRequest.Merge(m, src)
}
func (m *UnregisterRequest) XXX_Size() int {
	return xxx_messageInfo_UnregisterRequest.Size(m)
}
func (m *UnregisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterRequest proto.InternalMessageInfo

func (m *UnregisterRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type UnregisterReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnregisterReply) Reset()         { *m = UnregisterReply{} }
func (m *UnregisterReply) String() string { return proto.CompactTextString(m) }
func (*UnregisterReply) ProtoMessage()    {}
func (*UnregisterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{7}
}

func (m *UnregisterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnregisterReply.Unmarshal(m, b)
}
func (m *UnregisterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnregisterReply.Marshal(b, m, deterministic)
}
func (m *UnregisterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnregisterReply.Merge(m, src)
}
func (m *UnregisterReply) XXX_Size() int {
	return xxx_messageInfo_UnregisterReply.Size(m)
}
func (m *UnregisterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UnregisterReply.DiscardUnknown(m)
}

var xxx_messageInfo_UnregisterReply proto.InternalMessageInfo

func (m *UnregisterReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UnregisterReply) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type ReleasePipelinesRequest struct {
	ClientID             string   `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	Pipelines            []uint64 `protobuf:"varint,2,rep,packed,name=pipelines,proto3" json:"pipelines,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleasePipelinesRequest) Reset()         { *m = ReleasePipelinesRequest{} }
func (m *ReleasePipelinesRequest) String() string { return proto.CompactTextString(m) }
func (*ReleasePipelinesRequest) ProtoMessage()    {}
func (*ReleasePipelinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{8}
}

func (m *ReleasePipelinesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleasePipelinesRequest.Unmarshal(m, b)
}
func (m *ReleasePipelinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleasePipelinesRequest.Marshal(b, m, deterministic)
}
func (m *ReleasePipelinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleasePipelinesRequest.Merge(m, src)
}
func (m *ReleasePipelinesRequest) XXX_Size() int {
	return xxx_messageInfo_ReleasePipelinesRequest.Size(m)
}
func (m *ReleasePipelinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleasePipelinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleasePipelinesRequest proto.InternalMessageInfo

func (m *ReleasePipelinesRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *ReleasePipelinesRequest) GetPipelines() []uint64 {
	if m != nil {
		return m.Pipelines
	}
	return nil
}

type ReleasePipelinesReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Failures             []uint64 `protobuf:"varint,3,rep,packed,name=failures,proto3" json:"failures,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleasePipelinesReply) Reset()         { *m = ReleasePipelinesReply{} }
func (m *ReleasePipelinesReply) String() string { return proto.CompactTextString(m) }
func (*ReleasePipelinesReply) ProtoMessage()    {}
func (*ReleasePipelinesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ed7f10298fa1d90f, []int{9}
}

func (m *ReleasePipelinesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleasePipelinesReply.Unmarshal(m, b)
}
func (m *ReleasePipelinesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleasePipelinesReply.Marshal(b, m, deterministic)
}
func (m *ReleasePipelinesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleasePipelinesReply.Merge(m, src)
}
func (m *ReleasePipelinesReply) XXX_Size() int {
	return xxx_messageInfo_ReleasePipelinesReply.Size(m)
}
func (m *ReleasePipelinesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleasePipelinesReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReleasePipelinesReply proto.InternalMessageInfo

func (m *ReleasePipelinesReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReleasePipelinesReply) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *ReleasePipelinesReply) GetFailures() []uint64 {
	if m != nil {
		return m.Failures
	}
	return nil
}

func init() {
	proto.RegisterType((*GetClientCountRequest)(nil), "gravity.api.controller.GetClientCountRequest")
	proto.RegisterType((*GetClientCountReply)(nil), "gravity.api.controller.GetClientCountReply")
	proto.RegisterType((*GetPipelineCountRequest)(nil), "gravity.api.controller.GetPipelineCountRequest")
	proto.RegisterType((*GetPipelineCountReply)(nil), "gravity.api.controller.GetPipelineCountReply")
	proto.RegisterType((*RegisterRequest)(nil), "gravity.api.controller.RegisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "gravity.api.controller.RegisterReply")
	proto.RegisterType((*UnregisterRequest)(nil), "gravity.api.controller.UnregisterRequest")
	proto.RegisterType((*UnregisterReply)(nil), "gravity.api.controller.UnregisterReply")
	proto.RegisterType((*ReleasePipelinesRequest)(nil), "gravity.api.controller.ReleasePipelinesRequest")
	proto.RegisterType((*ReleasePipelinesReply)(nil), "gravity.api.controller.ReleasePipelinesReply")
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor_ed7f10298fa1d90f) }

var fileDescriptor_ed7f10298fa1d90f = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0xfb, 0xef, 0xeb, 0xd7, 0x5e, 0xd0, 0xd6, 0xd1, 0xb6, 0x31, 0xb8, 0x28, 0x03, 0xd2,
	0x4a, 0x49, 0x0a, 0xfa, 0x04, 0x12, 0xa1, 0xb8, 0x93, 0x88, 0x3b, 0x37, 0x69, 0xb8, 0x96, 0xc0,
	0x30, 0x89, 0x33, 0x13, 0xa1, 0xaf, 0xe4, 0x53, 0x4a, 0xa7, 0x4d, 0x62, 0xd3, 0x44, 0x63, 0x97,
	0x27, 0x73, 0xee, 0x39, 0x97, 0xcb, 0x8f, 0x40, 0xdf, 0x0f, 0xb9, 0x12, 0x21, 0x63, 0x28, 0xec,
	0x48, 0x84, 0x2a, 0x24, 0xc3, 0x95, 0xf0, 0x3e, 0x02, 0xb5, 0xb6, 0xbd, 0x28, 0xb0, 0xb3, 0x57,
	0x3a, 0x82, 0xc1, 0x02, 0x95, 0xc3, 0x02, 0xe4, 0xca, 0x09, 0x63, 0xae, 0x5c, 0x7c, 0x8f, 0x51,
	0x2a, 0x3a, 0x83, 0xf3, 0xfc, 0x43, 0xc4, 0xd6, 0xe4, 0x02, 0xfe, 0xf9, 0x1b, 0x65, 0xd4, 0xc7,
	0xf5, 0x69, 0xcb, 0xdd, 0x0a, 0x7a, 0x09, 0xa3, 0x05, 0xaa, 0xa7, 0x20, 0x42, 0x16, 0x70, 0xdc,
	0xcb, 0xb1, 0x74, 0x41, 0xee, 0xa9, 0x3c, 0xc9, 0x82, 0x9e, 0x8b, 0xab, 0x40, 0x2a, 0x14, 0xbb,
	0x04, 0x62, 0x42, 0xc7, 0xd7, 0x6b, 0x3c, 0x3e, 0x68, 0x6f, 0xd7, 0x4d, 0x35, 0xbd, 0x87, 0x93,
	0xcc, 0xbe, 0x49, 0x35, 0xe0, 0xbf, 0x8c, 0x7d, 0x1f, 0xa5, 0xd4, 0xde, 0x8e, 0x9b, 0x48, 0x32,
	0x84, 0xb6, 0x40, 0x4f, 0x86, 0xdc, 0x68, 0xe8, 0x90, 0x9d, 0xa2, 0x73, 0x38, 0x7b, 0xe1, 0xe2,
	0x0f, 0x9d, 0x0e, 0xf4, 0xbe, 0x0f, 0x1c, 0xd7, 0xfa, 0x0c, 0x23, 0x17, 0x19, 0x7a, 0x12, 0x93,
	0xd3, 0xc8, 0x0a, 0xdd, 0xe4, 0x0a, 0xba, 0x51, 0xe2, 0x37, 0x1a, 0xe3, 0xe6, 0xb4, 0xe5, 0x66,
	0x1f, 0x28, 0xc2, 0xe0, 0x30, 0xf4, 0xa8, 0xfd, 0x36, 0x4b, 0xbc, 0x79, 0x01, 0x8b, 0x05, 0x4a,
	0xa3, 0xa9, 0x7b, 0x52, 0x7d, 0xfb, 0xd9, 0x02, 0x70, 0x52, 0x84, 0x08, 0x87, 0xd3, 0x7d, 0x52,
	0x88, 0x65, 0x17, 0xd3, 0x66, 0x17, 0xa2, 0x66, 0xce, 0xaa, 0xda, 0x23, 0xb6, 0xa6, 0x35, 0xa2,
	0xa0, 0x9f, 0x27, 0x8a, 0xcc, 0x7f, 0x88, 0x28, 0xc2, 0xd2, 0xb4, 0xaa, 0x0f, 0x6c, 0x5b, 0x5f,
	0xa1, 0x93, 0x90, 0x46, 0x26, 0x65, 0xc3, 0x39, 0x74, 0xcd, 0xeb, 0xdf, 0x8d, 0xdb, 0xf4, 0x25,
	0x40, 0xc6, 0x14, 0xb9, 0x29, 0x1b, 0x3b, 0x00, 0xd5, 0x9c, 0x54, 0xb1, 0xa6, 0x77, 0xcb, 0xd3,
	0x51, 0x7e, 0xb7, 0x12, 0x38, 0xcb, 0xef, 0x56, 0x08, 0x1e, 0xad, 0x2d, 0xdb, 0xfa, 0xff, 0x73,
	0xf7, 0x15, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x1f, 0x0e, 0xf3, 0x93, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	GetClientCount(ctx context.Context, in *GetClientCountRequest, opts ...grpc.CallOption) (*GetClientCountReply, error)
	GetPipelineCount(ctx context.Context, in *GetPipelineCountRequest, opts ...grpc.CallOption) (*GetPipelineCountReply, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterReply, error)
	ReleasePipelines(ctx context.Context, in *ReleasePipelinesRequest, opts ...grpc.CallOption) (*ReleasePipelinesReply, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) GetClientCount(ctx context.Context, in *GetClientCountRequest, opts ...grpc.CallOption) (*GetClientCountReply, error) {
	out := new(GetClientCountReply)
	err := c.cc.Invoke(ctx, "/gravity.api.controller.Controller/GetClientCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) GetPipelineCount(ctx context.Context, in *GetPipelineCountRequest, opts ...grpc.CallOption) (*GetPipelineCountReply, error) {
	out := new(GetPipelineCountReply)
	err := c.cc.Invoke(ctx, "/gravity.api.controller.Controller/GetPipelineCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/gravity.api.controller.Controller/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterReply, error) {
	out := new(UnregisterReply)
	err := c.cc.Invoke(ctx, "/gravity.api.controller.Controller/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ReleasePipelines(ctx context.Context, in *ReleasePipelinesRequest, opts ...grpc.CallOption) (*ReleasePipelinesReply, error) {
	out := new(ReleasePipelinesReply)
	err := c.cc.Invoke(ctx, "/gravity.api.controller.Controller/ReleasePipelines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	GetClientCount(context.Context, *GetClientCountRequest) (*GetClientCountReply, error)
	GetPipelineCount(context.Context, *GetPipelineCountRequest) (*GetPipelineCountReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Unregister(context.Context, *UnregisterRequest) (*UnregisterReply, error)
	ReleasePipelines(context.Context, *ReleasePipelinesRequest) (*ReleasePipelinesReply, error)
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) GetClientCount(ctx context.Context, req *GetClientCountRequest) (*GetClientCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientCount not implemented")
}
func (*UnimplementedControllerServer) GetPipelineCount(ctx context.Context, req *GetPipelineCountRequest) (*GetPipelineCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineCount not implemented")
}
func (*UnimplementedControllerServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedControllerServer) Unregister(ctx context.Context, req *UnregisterRequest) (*UnregisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (*UnimplementedControllerServer) ReleasePipelines(ctx context.Context, req *ReleasePipelinesRequest) (*ReleasePipelinesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePipelines not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_GetClientCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetClientCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.api.controller.Controller/GetClientCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetClientCount(ctx, req.(*GetClientCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_GetPipelineCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetPipelineCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.api.controller.Controller/GetPipelineCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetPipelineCount(ctx, req.(*GetPipelineCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.api.controller.Controller/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.api.controller.Controller/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ReleasePipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).ReleasePipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gravity.api.controller.Controller/ReleasePipelines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).ReleasePipelines(ctx, req.(*ReleasePipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gravity.api.controller.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientCount",
			Handler:    _Controller_GetClientCount_Handler,
		},
		{
			MethodName: "GetPipelineCount",
			Handler:    _Controller_GetPipelineCount_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Controller_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Controller_Unregister_Handler,
		},
		{
			MethodName: "ReleasePipelines",
			Handler:    _Controller_ReleasePipelines_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}
